---
interface Props extends astroHTML.JSX.AnchorHTMLAttributes {
  styled?: boolean;
  hoverStyled?: boolean;
  hoverEffectOffsetStart?: string;
  hoverEffectOffsetEnd?: string;
}

const {
  styled,
  hoverStyled,
  hoverEffectOffsetStart,
  hoverEffectOffsetEnd,
  class: className,
  ...rest
} = Astro.props;

const offsetStart = hoverEffectOffsetStart;
const offsetEnd = hoverEffectOffsetEnd;
---

<script>
  import { navigate } from "astro:transitions/client";

  let previousPath = window.location.pathname;
  let isNavigating = false;

  function dispatchLocalNavigation(path: string) {
    const event = new CustomEvent("local-navigation", {
      bubbles: true,
      detail: { path },
    });
    document.dispatchEvent(event);
  }

  document.addEventListener("click", (event) => {
    const link = (event.target as HTMLElement).closest("a.custom-link") as HTMLAnchorElement | null;

    if (!link) {
      return;
    }

    if (link.href.startsWith(location.origin)) {
      const path = link.href.replace(location.origin, "");
      dispatchLocalNavigation(path);
    }
  });

  window.addEventListener("popstate", async () => {
    if (window.location.origin !== location.origin) return;

    const currentPath = window.location.pathname;
    const currentHash = window.location.hash;

    if (!isNavigating && currentPath !== previousPath && currentHash) {
      isNavigating = true;
      await navigate(currentPath + currentHash, { history: "replace" });
    }

    dispatchLocalNavigation(window.location.pathname);
  });

  document.addEventListener("astro:page-load", () => {
    previousPath = window.location.pathname;
    isNavigating = false;
  });
</script>

<style define:vars={{ offsetStart, offsetEnd }}></style>

<a
  class:list={[
    "custom-link",
    {
      "text-primary-gradient underline-offset-2 hover:underline": styled,
      "link-hover-animation hover:link-hovered-animation": hoverStyled,
    },
    className,
  ]}
  {...rest}><slot /></a
>
